1. 触发器 trigger
 dml触发器
 1.1 创建触发器的语法
  create trigger 触发器名 触发时间 触发事件 on 表名 for each row
  begin
    触发程序;
  end;
  其中：
    触发时间：before、after
    触发事件: insert、delete、update
    表名:    要监控的表
    for each row: 行级触发器

  列标识符：new(新值)   old(原值)
    new    insert     update
    old               update   delete

    new.字段    old.字段

  1.2 示例：创建触发器，实现检查约束
   课程表中的选课上限人数 up_limit 必须在(60,150,230)中取值
   create trigger tr_insert_course_before before insert
      on course for each row
   begin
      if new.up_limit not in(60,150,230) then
        signal sqlstate 'ERROR' set message_text='选修人数上限必须在(60,150,230)中取值';
      end if;
   end;
   -- 测试
   insert into course
       values(null,'Win32',100,'暂无',default,'005'); -- 失败
   insert into course
       values(null,'Win32',150,'暂无',default,'005');
   练习：创建触发器，实现在更改课程表时，确保up_limit在(60,150,230)中取值
   create trigger tr_update_course_before before update
      on course for each row
   begin
      if new.up_limit not in(60,150,230) then
        set new.up_limit=old.up_limit;
      end if;
   end;   

   update course set up_limit=100 where course_name='Win32';

  1.3 查看触发器
   1)show triggers\G
   2)select * from information_schema.triggers\G
  1.4 删除触发器
   drop trigger 触发器名;
  
2. 存储过程 procedure
 2.1 创建存储过程的语法
  create procedure 存储过程名(参数列表)
  begin
    存储过程语句块;
  end;

  参数有三种模式
  in:	 输入参数    缺省
  out:   输出参数
  inout: 输入输出参数

   参数：  模式 参数名 数据类型
   比如：  out cnt int

  2.2 创建存储过程，实现根据学号查询选修课程数
   delimiter $$
   create procedure proc_getcoursenum(
      stu_no char(11),out cnt int)
   begin
     select count(*) into cnt from choose 
        where student_no=stu_no;
   end;
   $$
   delimiter ; 
  2.3 调用
   -- 语法
   call 存储过程名(参数列表);

   set @cnt=0;
   call proc_getcoursenum('2018001',@cnt);
   select @cnt;

  2.4 使用inout参数
   delimiter $$
   create procedure proc_getcoursenum2(inout no int)
   begin
     select count(*) into no from choose
          where student_no=no;
   end;
   $$
   delimiter ;

   set @num='2018001';
   call proc_getcoursenum2(@num);
   select @num;

  2.5 查看存储过程
   1) show procedure status\G
   2) select * from mysql.proc where type='procedure'
        and db='数据库名'\G

      select * from mysql.proc where type='procedure'
        and db='choose'\G
  2.6 删除存储过程
   -- 语法
   drop procedure 存储过程名;
  2.7 函数和存储过程的区别
   1) 函数必须有返回类型和返回值，存储过程使用out或inout的参数作为返回值
   2) 函数内部可以使用select..into语句为变量复制，但是不能有返回结果集的语句。存储过程没有这个限制。
   3) 函数可以直接在sql语句或MySQL命令中调用，存储过程一般单独调用
   4) 函数的函数体中不能使用事务控制语句。
  
3. 错误触发条件和错误处理
 insert into choose values(null,'2018100',1,null,now());

ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails (`choose`.`choose`, CONSTRAINT `student_choose_fk` FOREIGN KEY (`student_no`) REFERENCES `student` (`student_no`))

  1452:   MySQL错误代码
  23000： ANSI标准错误代码
  
  3.1 自定义错误处理程序
   1) 语法
    declare 错误处理类型 handler for 错误触发条件 自定义错误处理程序
    其中：
       错误处理类型：  continue、exit
       错误触发条件：
          预定义：  sqlexception、sqlwarning、not found
          MySQL错误代码
          ANSI标准错误代码
  
   2) 使用预定义错误触发条件
    创建存储过程，根据给定的学号查询姓名。如果学号不存在，提示错误
    delimiter $$
    create procedure proc_getname(
      stu_no char(11),out stu_name char(10))
    begin
      declare continue handler for not found 
      begin
        select concat('没有学号为',stu_no,'的学生') error;
      end;
      select student_name into stu_name from student
        where student_no=stu_no;
    end;
    $$
    delimiter ;

    set @stu_name='';
    call proc_getname('2018100',@stu_name);
    select @stu_name;
    call proc_getname('2018001',@stu_name);
    select @stu_name;

   3) 使用MySQL的错误代码
    创建存储过程，向课程表插入数据，如果教师工号重复，提示错误
    insert into course
       values(null,'MFC',60,'暂无',default,'001');
ERROR 1062 (23000): Duplicate entry '001' for key 'teacher_no'

    delimiter $$
    create procedure proc_insert_course(
     c_name char(10),cnt int,t_no char(10))
    begin
     declare exit handler for 1062
     begin
       select concat('工号为',t_no,'数据重复') error;
     end;
     declare exit handler for 1452
     begin
       select concat('工号为',t_no,'的教师不存在') error;
     end;
     insert into course(course_name,up_limit,description,
      teacher_no) values(c_name,cnt,'暂无',t_no);
    end;
    $$
    delimiter ;
    -- 测试
    call proc_insert_course('HTML',150,'001');
    call proc_insert_course('HTML',150,'007');
 
   3) ANSI标准错误代码
    declare exit handler for 1452
    替换成
    declare exit handler for sqlstate '23000'
 
  3.2 自定义错误触发条件
   1) 语法
   declare 错误触发条件 condition for MySL错误代码或ANSI标准错误代码;
   2) 示例
   delimiter $$
   create procedure proc_insert_course2(
     c_name char(10),cnt int,t_no char(10))
   begin
     declare unique_err condition for 1062;
     declare exit handler for unique_err
     begin
       select concat('工号为',t_no,'的数据重复') error;
     end;
     insert into course 
      values(null,c_name,cnt,'暂无',default,t_no);
   end;
   $$
   delimiter ;

4. 游标 cursor
 4.1 概念和作用
  游标可以看成是一个指向结果集中一行数据的位置实体或位置指针。
  有了游标，就可以操作结果集中的每一行数据。比如，提取游标指向的数据并处理
  作用就是处理多行结果集。
 4.2 游标的使用步骤
  1) 声明游标
    declare 游标名 cursor for select语句;
    声明游标名及其对应的select语句。
  2) 打开游标
    open 游标名;
    执行声明游标时的select语句，并将结果集检索到内存，同时游标指针指向结果集的首部。
  3) 提取数据
    fetch 游标名 into 变量列表;
    把游标指针指向的当前行数据保存到对应的变量中
    游标指针自动向下移动一行
    注意：变量列表必须和select语句中的字段列表匹配
  4) 关闭游标
    close 游标名;
    释放打开时的结果集。

  4.3 案例
   某一门选修课程开始结束后，在录入成绩时，出于某些原因，需要将该课程所有学生的成绩加5分(但是总分不能超过100)，修改后的成绩如果介于55~59分之间，将这些学生的成绩改为60分。
   delimiter $$
   create procedure proc_update_score(c_no int)
   begin
     -- 声明局部变量
     declare stu_no char(11);
     declare grade int;
     declare state char(10);
     -- 声明游标
     declare score_cursor cursor for 
      select student_no,score from choose where course_no=c_no;
     -- 声明错误处理程序
     declare continue handler for not found set state='nodata';
     -- 打开游标
     open score_cursor;
     -- 循环提取并处理数据
     update_score:loop
       fetch score_cursor into stu_no,grade;
       if state='nodata' then
           leave update_score;
       end if;
       set grade=grade+5;
       if grade>100 then
           set grade=100; 
       end if;
       if grade>=55 and grade<=59 then 
           set grade=60; 
       end if;
       update choose set score=grade
           where student_no=stu_no and course_no=c_no;
     end loop update_score;
     -- 关闭游标
     close score_cursor;
   end;
   $$
   delimiter ;
   -- 测试
   call proc_update_score(2);
 
5 事务机制
 5.1 事务机制的必要性
  银行转账
  1) 创建账户表 account
   create table account(
     account_no int auto_increment primary key,
     account_name char(10) not null,
     balance int unsigned
   );
  2) 插入测试数据
   insert into account values(null,'甲',1000);
   insert into account values(null,'乙',1000);
  3) 创建存储过程
   delimiter $$
   create procedure proc_transfer(
     from_account int,to_account int,money int)
   begin
     update account set balance=balance+money
            where account_no=to_account;
     update account set balance=balance-money
            where account_no=from_account;
   end;
   $$
   delimiter ;
  4) 测试存储过程
   -- '甲'给'乙'转账800
   call proc_transfer(1,2,800);
   select * from account;
   +------------+--------------+---------+
   |          1 | 甲           |     200 |
   |          2 | 乙           |    1800 |
   +------------+--------------+---------+
  5) 再次调用存储过程
   -- '甲'给'乙'转账800
   call proc_transfer(1,2,800);
   select * from account;
   +------------+--------------+---------+
   |          1 | 甲           |     200 |
   |          2 | 乙           |    2600 |
   +------------+--------------+---------+
  
 5.2 关闭MySQL自动提交
  1) 显式关闭
    -- 查看自动提交状态
    show variables like 'autocommit';
    -- 关闭自动提交
    set autocommit=0;
  2) 隐式关闭
    -- 开始事务
    start transaction;
    隐式关闭自动提交，不改变@@autocommit的值
 5.3 回滚 rollback
  作用：撤销当前会话中所有没有提交的dml操作。
  set autocommit=0;
  update account set balance=balance+800 where account_no=2;
  select * from account;
  rollback;
  select * from account;
 5.4 提交
  1) 显式提交
   commit;
  2) 隐式提交
   begin,set autocommit=1,start transaction
   ddl语句(create、drop、alter)
   dcl语句(create user、grant、revoke)
   锁语句
  
   set autocommit=0;
   update account set balance=balance+800 where account_no=2;
   select * from account;
   commit;
   select * from account;
 
 5.5 事务
  drop procedure proc_transfer;
   
  delimiter $$
  create procedure proc_transfer(
   from_account int,to_account int,money int)
  begin
   declare continue handler for 1690
   begin
     rollback;
   end;
   start transaction;
   update account set balance=balance+money 
        where account_no=to_account;
   update account set balance=balance-money
        where account_no=from_account;
   commit;
  end;
  $$
  delimiter ;

  
  -- 测试
  call proc_transfer(1,2,800);
     
  5.6 保存点 savepoint
   案例：创建一个存储过程，事项申请两个账号
   delimiter $$
   create procedure  proc_savepoint()
   begin
     declare continue handler for 1062
     begin
       rollback to A;
       commit;
     end;
     start transaction;
     insert into account values(null,'丙',1000);
     savepoint A;
     insert into account values(last_insert_id(),'丁',1000);
     commit;
   end;
   $$
   delimiter ;

   call proc_savepoint();

 5.7 事务的ACID特性
  1) 原子性 (Atomicity)
   一个事务中的多条语句是一个不可分割的整体，要么一起成功，要么一起失败
  2) 一致性 (Consistency)
   事务执行后，数据由一种一致性状态转换成另一种一致性状态
  3) 隔离性 (Isolation)
   一个事务对数据的改变，在提交之前，对于其它的事务是不可见的
  4) 持久性 (Durability)
   事务一旦提交，对数据的改变就是永久的
 















    
  







