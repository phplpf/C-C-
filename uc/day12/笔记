回忆昨天内容：
一 网络基础
跨网段数据的传输    网帧的mac地址一直在改变。但是ip报文中目标ip和源ip一直不变   路由表   arp表  网关
二 基于TCP的网络编程
TCP/UDP的区别
三次握手   四次分手
编程模型  服务器   客户端
socket(2)  bind(2)  listen(2)  accept(2)  connect(2)
通用地址结构   具体地址结果   ipv4 
端口号 网络字节序的短整型无符号
ip地址--->网络字节序的无符号整型
htonl(3)  inet_pton(3)


今天的内容：
一  基于tcp的编程实现
继续封装昨天的代码

制作成自己的动态库
实现一次连接多次通讯

二  实现服务器的并发

使用多进程实现服务器的并发
什么时候创建子进程？
客户端的连接成功的时候，创建子进程

子进程负责的任务是什么？
1  关闭sfd
2  和客户端的业务沟通
3  关闭连接描述符
4  子进程终止

父进程负责的任务是什么？
1 创建子进程
2 回收子进程资源
3 从未决连接队列取出一个进行连接处理
4 关闭连接描述符



三 基于UDP的编程实现

TCP/UDP的区别
编程模型
服务器端模型
1  创建通讯端点，返回该设备的文件描述符fd  socket(2)
2  将fd和本地地址 端口号绑定   bind(2)
while(1){
	3 接收客户端的请求信息   recvfrom(2)
        4 处理客户端的请求信息  
        5 响应客户端   sendto(2)
}


客户端的编程模型
1 创建通讯端点，返回该设备的文件描述符  socket(2)
2 向服务器发送消息    sendto(2)
3 阻塞等待服务器的响应  recvfrom(2)
4 处理响应信息
5 关闭设备   close(2)

recvfrom(2)   sendto(2)
 
#include <sys/types.h>
#include <sys/socket.h>
ssize_t recvfrom(int sockfd,void *buf,size_t len,\
	 int flags,
       struct sockaddr *src_addr, socklen_t *addrlen);
功能：从指定的socket上接收一条消息
参数：
sockfd: 指定具体的socket设备
buf:将接收到的消息，存放到这里
len:用户指定buf空间的大小
flags:0
src_addr:将消息的源地址存放到这里。如果是空，对源地址不感兴趣
addrlen:值-结果参数，如果src_addr为空，这个参数也为空
返回值：
成功  返回接收到的字节数
失败 -1  errno被设置

#include <sys/types.h>
#include <sys/socket.h>
ssize_t sendto(int sockfd, const void *buf, size_t len, 	int flags,
    const struct sockaddr *dest_addr, socklen_t addrlen);
功能：在指定的设备上发送一条消息
参数：
sockfd:指定具体的设备，也就是在这个设备上发送消息
buf:要发送的数据存储在这里
len:指定要发送的消息的字节数
flags:0
dest_addr:目标地址
addrlen:指定dest_addr的空间大小
返回值：
错误  -1  errno被设置
成功  发送出去的字节数

四  线程的基础
进程和线程的关系
 进程是资源分配的基本单位。而线程是执行的基本单位。
 一个进程中至少有一个线程，如果一个进程中只有一个线程，那么这个线程是这个进程的主线程。
  每个进程都有自己的pid  PCB
  每个线程有自己的tid  TCB
  进程中的所有线程共享进程的资源。每个线程也有自己私有的资源。
  既然有了进程，那为什么提出线程？
线程间的通讯比进程间通讯方便很多，效率高
线程间的切换比进程的切换开销少很多。
  每个线程都有自己的一个执行函数。
五  新线程的创建


pthread_create(3)
创建一个新的线程
#include <pthread.h>
int pthread_create(pthread_t *thread, 
	const pthread_attr_t *attr,
      void *(*start_routine) (void *), void *arg);
功能：创建一个新的线程
参数：
thread:将新建线程的id存储到这个空间里
attr:NULL  使用缺省的属性创建一个新的线程
start_routine：线程的执行函数
arg:是线程执行函数的唯一的参数
返回值：
成功   0
错误  错误码
       
Compile and link with -pthread.
void *(*start_routine) (void *)
 



