回顾昨天的内容：
一 动态加载
动态链接器  dlopen(3)  dlclose(3)  dlerror(3)  dlsym(3)
函数指针   typedef  
二 程序中的错误处理
全局变量  int errno;
库函数或者系统调用这些函数被调用的时候，如果发生错误，会设置errno的值。根据errno的值获取到错误产生的原因。
strerror(3)  perror(3)

三  内存管理
物理地址 虚拟地址0~4G-1 线性地址
每个进程都有独立的4G地址空间  3G用户态  1G内核态
分段   section   segment
分页  页   页框  页表 4k
代码段   数据段  栈段
readelf -a 可执行文件
elf格式的文件

今天的内容：
一 内存管理（续）
代码段   可执行 可读 
数据段   可读 可写
栈段     可读  可写
静态分配  动态分配

如何查看一个进程的这些段呢？
cat /proc/$$/maps  查看当前bash进程的映射图
每个进程都有自己的一个pid。进程的身份证编号
cat /proc/进程的pid/maps

如何知道进程的pid呢？
getpid(2)
 
#include <sys/types.h>
#include <unistd.h>
pid_t getpid(void);
       
pid_t getppid(void);



pid_t 是什么类型？


栈段:
每个函数都有自己对应的栈帧。函数调用完毕的时候，函数对应的栈帧也就释放了。如果变量的空间分配在栈帧里了，那这些变量也就死了。
函数的生命周期 
进程的生命周期
局部变量（自动的）函数的形参  栈帧里

静态的局部变量和全局变量的空间分配在数据段里
数据段的生命周期是进程
代码参见  count.c

变量的作用域和生命周期

local   global

BSS 段 未初始化的数据段
全局变量或静态局部变量 初始值为0 或者不设置初始值的时候，默认的取0


char *p_strcpy(char *dest, const char *src);





二 文件的操作








