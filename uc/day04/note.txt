昨天内容回顾
内存管理
物理地址  虚拟地址(0-4G-1)  线性地址
每个进程都有独立的4G地址空间 3G用户态 1G内核态
分段   section(区间)  segment(碎片)

分页   页    页框   页表(基本单位4K)

代码段   数据段   栈段

readelf -a  可执行文件
elf格式文件

今天的内容
一 内存管理(续)
代码段   可执行  可读 不可写
数据段	 不能执行，可读 可写
栈段     不可执行，可读 可写
静态分配    动态分配
如何查看一个进程的这些段呢
cat /proc/$$/maps  查看当前bash 进程的映射图
每个进程都有自己的一个pid。 进程的身份证编号
cat /proc/进程的pid/maps
如何知道进程的pid呢
getpid(2) 
 #include <sys/types.h>
       #include <unistd.h>
       pid_t getpid(void);
       pid_t getppid(void);

cs（代码段）ip 下一个代码段的偏移地址
pid_t  int 类型

栈段
每个函数都有自己对应的栈帧，函数调用完毕的时候，函数对应的栈帧也就释放了。如果变量的空间分配在栈帧里了，那这些变量也就死了。

函数的生命周期
进程的生命周期
局部变量（自动的）和 函数的形参 存在 栈帧里
栈段里至少有一个栈帧

静态的局部变量和全局变量的空间分配在 数据段里
数据段的生命周期是进程

local   global
本地的    全局的
BSS 段 未初始化的数据段
全局变量或静态局部变量 初始值为0，或者不设置初始值时默认为0(指针为空)










二 文件的操作

