


#define预处理指令用来定义宏

宏可以用来给数字起名字

宏名称通常都是由大写字母构成的
宏名称里不可以包含空格
不要在宏定义语句里使用赋值操作符

编译器会把程序里的所有宏名称替换成
    它所代表的数字

可以在编译时决定宏名称所代表的数字
这个时候需要使用-D选项

宏可以在程序里代表编译时才能确定
    的数字

宏也可以用来给一个计算公式起名字
计算公式里包含未知数字,宏的参数可以
    用来表示这些未知数字

宏的参数可以代表不是数字的内容,所以
    没有配对的类型名称

宏自己的存储区不能用来和函数之间
    进行数据传递

如果希望从宏向函数传递数字就应该优先
    考虑把宏编写成表达式,用表达式的
    结果代表要传递的数字

宏的参数可以直接代表函数的存储区

宏不能保证优先计算内部的操作符,所以
     能当做数字使用的宏必须写在
     小括号里

宏不能保证优先计算参数里面的操作符,
    能当做数字使用的参数也应该写在
    小括号里

不要把自增或自减的结果作为宏的参数使用

编写宏的时候可以使用宏操作符
它们可以实现一些特殊的效果
#是一个宏操作符,它可以把宏的参数转换
    成字符串字面值(在参数的前后各加
    一个双引号)
##也是一个宏操作符,它可以把一个代表
    标识符的参数和其它内容连接得到一个
    新的标识符

条件编译指编译时从几组语句里选择一组
    进行编译而忽略其它组
#ifdef/#ifndef...#else...#endif
以上结构可以实现条件编译的效果
它根据一个宏名称是否存在从两组语句
    里选择一组进行编译
最前面的预处理指令需要从两个里选择
    一个,不论选择哪个后面都要写
    一个宏名称
如果选择#ifdef就表示宏名称存在的时候
    编译前一组语句,否则编译后一组语句
如果选择#ifndef效果刚好相反

#if...#elif(任意多次)...#else...#endif
这个结构也可以实现条件编译
它可以根据任意逻辑表达式从多组语句中
    选择一组进行编译
#if和#elif预处理指令后都需要写上逻辑
     表达式
这些逻辑表达式里可以包含任意逻辑操作符,
    它们的作用和if分支里逻辑表达式的作用
    类似

把程序编写在多个不同的文件里叫多文件
    编程
多文件编程的时候一个文件里可以包含多个
    函数,一个函数只能属于一个文件

单文件程序改造成多文件程序的步骤
1.把所有函数分散在多个不同的源文件里.
   (通常主函数单独占一个文件) 
2.为每个源文件编写以.h作为扩展名的
    头文件(主函数所在的源文件不需要
    配合的头文件)只要不分配内存的内容都
    可以写在头文件里.头文件里至少应该
    包含配对源文件里所有函数的声明语句.
3.在所有源文件里使用#include预处理指令
    包含所有必要的头文件.配对头文件都是
    必要头文件.如果源文件里使用了某个
    头文件里声明的函数则这个头文件也是
    必要头文件.

在gcc命令后列出所有源文件的路径就可以
    编译多文件方式编写的程序

可以把多文件程序的编译步骤记录到Makefile
    文件里,然后使用make工具根据Makefile
    文件内容自动进行编译

Makefile文件里所有编译命令前应该用
   tab键而不是空格

头文件内容应该包含在条件编译的预处理
    指令中间,这样可以避免编译一个源文件
    的时候多次编译同一个头文件的内容
头文件里的第一个预处理指令必须是#ifndef

不同头文件里的宏名称必须不同
宏名称应该根据头文件名称变化得到

为了使用另外的源文件里声明的全局变量
    就必须在当前文件里使用extern关键字
    再次声明那个全局变量

使用extern关键字声明变量的语句通常
    放在头文件里

不可以跨文件使用静态全局变量

预习:
    1.结构体





