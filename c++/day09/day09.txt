回顾：
1 继承概念
2 继承语法
  class 子类:继承方式 基类1,继承方式 基类2...{
  };
  继承方式：public protected private
3 公有继承特性
1）可以子类对象看做是基类对象
   基类子对象：子类对象中包含的基类部分
2）向上造型：子类指针、引用--》基类指针、引用
3）向下造型：基类指针、引用--》子类指针、引用
4）子类继承基类的成员：公有、保护和私有
5）子类隐藏基类的成员：解决“类名::”

4 访问控制属性和继承方式

5 子类的构造函数
1）没有指明基类子对象初始化方式，自动选择无参方式
2）可以通过初始化列表指明基类子对象的初始化方式
3）子类对象创建过程
--》分配内存
--》构造基类子对象
--》构造成员子对象
--》执行子类构造函数代码

6 子类析构函数
1）子类的基类会自动调用基类的析构函数
2）子类对象销毁过程
--》执行子类析构函数代码
--》析构成员子对象
--》析构基类子对象
--》释放内存

7 子类的拷贝构造和拷贝赋值

-------------------------------
今天：
二十一 继承(Inheritance)
...
8 多重继承
1）概念
   一个子类同时继承多个基类，这样的继承方式被称为多重继承
   电话	播放器  计算机
   	\	   | 		/
   	   智能手机
2）向上造型时，编译器会根据各个基类子对象的内存布局，自动进行计算，保证指针的类型和所指向的目标子对象类型一致。

3）名字冲突问题
--》多重继承时，如果多个基类中存在相关的名字，通过子类访问时，编译器将会报歧义错误--名字冲突。
--》解决名字冲突的通过做法就是显式的使用“类名::”，指明所访问的名字属于哪个基类//推荐
--》如果相同的名字是成员函数，并满足不同参重载条件，也可以通过using声明，让它们在子类中形成重载，通过参数的重载解析来解决.

9 钻石继承和虚继承
1）一个子类的多个基类同时继承共同的基类祖先，这样继承结果称为钻石继承
		A
	  / \
	 B   C
	  \ /
	   D
注：A称为公共基类,B、C称为中间类,D称为末端子类

2）创建末端子类D对象时，会包含多个公共基类(A)子对象,通过末端子类访问公共基类的成员，会因为继承路径不同而导致结果不一致。
3）通过虚继承可以让公共基类(A)子对象在末端子类(D)对象中实例唯一，并且可以为所有的中间(B,C)类共享，这样即使沿着不同的继承路径，所访问到公共基类的成员也是一致的。
4）虚继承语法
--》在继承表使用virtual关键字修饰
--》位于继承链的末端子类负责构造公共基类子对象
		A(int m_data)
	  / \
	 B   C//:virtual public A
	  \ /
	   D//负责构造公共基类子对象
	   
-----------------------------------------	 
eg:实现图形库，可以绘制各种图形
	 			图形基类(位置/绘制)
	 		  /						\
	 矩形(宽和高/绘制)   	圆形(半径/绘制)

  
二十二 多态(Polymorphic)
1 虚函数覆盖(函数重写)、多态的概念
1）如果将基类中某个成员函数声明为虚函数，那么子类中具有与相同原型的成员函数就也会变成虚函数，并且对基类中的版本形成覆盖，即函数重写。
2）满足了虚函数覆盖，再通过指向子类对象的基类指针或引用子类对象的基类引用，调用虚函数，实际被执行的将是子类中的覆盖版本，而不再是基类中原始版本，这种语法现象被称为多态.
  class A{ virtual void func(){} };
  class B:public A{ void func(){} };
  B b;
  A* pa = &b;//pa:指向子类对象的基类指针
  A& ra = b;//ra:引用子类对象的基类引用
  pa->func();//实际被执行的将是子类中的覆盖版本
  ra.func();//实际被执行的将是子类中的覆盖版本

2 虚函数覆盖条件
1）只有类中成员函数才能声明为虚函数，而静态成员函数、构造函数和全局函数都不能为虚函数。
	析构函数可以为虚函数(后面讲)
2）虚函数的virtual关键字修饰必须写在基类中，而与子类中的virtual无关。
3）虚函数在子类中版本和基类中版本必须具有相同的函数签名，即函数名、参数表、常属性一致。
4）如果虚函数在基类中版本返回基本类型的数据，那么子类中覆盖版本必须返回相同类型的数据
5）如果虚函数在基类中版本返回类型类型的指针(A*)或引用(A&)，那么允许子类中覆盖版本返回其子类类型的指针(B*)或引用(B&)
  class A{};
  class B:public A{};	  

3 多态的条件
1）多态的语法特性除了要满足虚函数覆盖条件，还必须通过指针或引用调用虚函数，才能表现出来。
2）调用虚函数的指针也可以是this指针，当通过子类对象调用基类中的成员函数时，该成员函数中的this指针将是一个指向子类对象的基类指针，再通过它调用虚函数，同样可以表现多态的语法特性//重点掌握  

eg：Qt多线程
	class QThread{//Qt官方写好表示线程类
	public:
		void start(void){
			run();
		}
	protected:
		//线程入口函数
		virtual void run(void){
			...
		}
	};
	class MyThread:public QThread{
	protected:
		//覆盖基类线程入口函数
		void run(void){
			//想在子线程中执行的代码...
		}
	};
	MyThread thread;
	thread.start();
	
4 多态的实现原理:通过虚函数表和动态绑定来实现//了解
1）虚函数表的生成会增加内存开销
2）动态绑定的过程或增加时间效率
3）虚函数不能被内联优化
注：如果没有多态的语法要求，最好不要使用虚函数

项目：企业员工管理系统V7.0
需求：增加技术主管类
	1）同时具备技术员的研发津贴和经理绩效奖金
	2）绩效工资=(技术员绩效+经理绩效)/2
		 员工类(Employee)
		/		 \
	技术员  	  经理
	   \      /
	   技术主管
	   
项目：企业员工管理系统V8.0
需求：使用多态语法优化继承结构
提示：
	class Employee{
	public:
		void printInfo(void){
			printBasic();
			printExtra();	
		}
		void printBasic(){//打印公有信息}
		virtual void printExtra(){//打印特有信息}
	};
	class Manager:public Employee{
	public:
		void printExtra(){//打印特有信息}
	};
	Manager manager(...);
	manager.printInfo();