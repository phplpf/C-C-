二十一 继承(Inheritance)
1 继承的概念//了解
  通过一种机制表达类型之间共性和特性的方式，利用已有数据类型定义新的数据类型,这种机制就是继承.
eg:
	人类：姓名、年龄、吃饭、睡觉
	学生类：姓名、年龄、吃饭、睡觉、学号、学习
	教师类：姓名、年龄、吃饭、睡觉、工资、讲课 
	... 
   -------------------------------
   人类：姓名、年龄、吃饭、睡觉
   学生类继承人类：学号、学习
   教师类继承人类：工资、讲课
   ...
   
   	人类(基类/父类)
     /	 \
   学生   教师(子类/派生类)
   
   基类--派生--》子类
   子类--继承--》基类
   
2 继承语法
	class 子类:继承方式 基类1,继承方式 基类2,...{
	};
	继承方式:
	1）public:公有继承
	2）protected:保护继承
	3）private:私有继承

3 公有继承的语法特性
1）子类对象会继承基类的属性和行为，通过子类对象可以访问基类中的成员，好像是基类对象在访问它们一样。
  注：子类对象中包含的基类部分可以称为“基类子对象”

2）向上造型(upcast)//重点掌握
   将子类类型的指针或引用转换为基类类型的指针或引用，这种操作性缩小的类型转换，在编译器看来是安全，可以直接隐式转换.
  基类
   ↑
  子类
	class A{};//基类
	class B:public A{};//子类
	class C:public A{};//子类
	class D:public A{};//子类
	void func(A* pa){}
	int main(void){
		A a; func(&a);
		B b; func(&b);//向上造型
		C c; func(&c);//向上造型
		...
	}
	
3）向下造型(downcast)
   将基类类型的指针或引用转换为子类类型的指针或引用，这种操作性放大的类型转换，在编译器看来是危险的，不能隐式转化，可以显式转换(推荐static_cast).
  基类
   ↓
  子类

4）子类继承基类的成员
--》在子类中，可以直接访问基类中的公有或保护成员，就好像它们被声明在子类一样.
--》基类中的私有成员，子类也可以继承，但是会受到访问控制属性的限制，无法直接访问。但是可以让基类提供公有或保护的接口函数，来间接访问。

5）子类隐藏基类的成员
-->如果子类和基类中定义了同名的成员函数，因为作用域不同不能构成重载关系，而是隐藏关系.
-->如果需要通过子类访问基类中被隐藏的成员，可以借助“类名::”显式指明//推荐
-->也可以通过using声明将基类中的成员函数引入到子类作用域，让它们在子类形成重载，通过参数重载解析解决

4 访问控制属性和继承方式
1）访问控制属性：影响访问该类成员的位置
访问控制		访问控制		内部	子类	外部	友元
限定符		属性			访问	访问	访问	访问
public		公有成员		ok		ok		ok		ok
protected	保护成员		ok		ok		no		ok
private		私有成员		ok		no		no		ok
2）继承方式：影响通过子类访问基类中成员的可访问性
基类中成员	公有继承子类  保护继承子类 私有继承子类
公有成员		公有成员			保护成员   	私有成员
保护成员		保护成员			保护成员		私有成员
私有成员		私有成员			私有成员		私有成员
注：向上造型语法特性在保护继承和私有继承中不再适用

5 子类构造函数
1）如果子类的构造函数没有指明基类子对象的初始化方式，将会自动选择基类的无参构造函数来初始化。
2）如果希望基类子对象以有参的方式被初始化，则必须使用初始化列表来显式指明.
3）子类对象创建的过程
--》分配内存
--》构造基类子对象(按继承表从左到右顺序)
--》构造成员子对象(按声明自上而下顺序)
--》执行子类构造函数代码
6 子类的析构函数
1）子类的析构函数，无论定义还是缺省的，都会自动调用基类的析构函数，完成基类子对象的销毁操作。
2）子类对象的销毁过程
--》执行子类析构函数代码
--》析构成员子对象(按声明逆序)
--》析构基类子对象(按继承表逆序)
--》释放内存
3）基类的析构函数不会自动调用子类析构函数，所以如果delete一个指向子类对象的基类指针，实际被执行的仅是基类的析构函数，子类的析构函数执行不到，有内存泄漏的风险！
	class A{};
	class B:public A{};
	A* pa = new B;//pa:指向子类对象的基类指针
	delete pa;//仅执行基类的析构函数，有内存泄漏风险

7 子类的拷贝构造和拷贝赋值
1）子类的拷贝构造
--》如果子类没有定义拷贝构造函数，那么编译器会为子类提供缺省的拷贝构造函数，它自动调用基类的拷贝构造函数，完成基类子对象的拷贝操作。
--》如果自定义了拷贝构造函数，编译器不再为子类提供缺省的拷贝构造，这时需要使用初始化列表，显式指明基类子对象也要以拷贝的方式进行初始化.
   class Base{};
   class Derived:public Base{
   	//Base(that):指明基类子对象以拷贝方式初始化
   	Derived(const Derived& that):Base(that),...{}
   };
2）子类的拷贝赋值
--》如果子类没有自己定义拷贝赋值函数，那么编译器会为子类提供一个缺省的拷贝赋值函数，该函数会自动调用基类的拷贝赋值函数，完成基类子对象的拷贝操作。
--》如果子类自己定了拷贝赋值函数，那么编译器不再为子类提供缺省的拷贝赋值函数，这时需要显式的调用基类的拷贝赋值函数，完成基类子对象的拷贝操作.
	class Base{};
   class Derived:public Base{
   	Derived& operator=(const Derived& that){
   		if(&that != this){
   			//显式的调用基类的拷贝赋值函数
   			Base::operator=(that);
   			...
   		}
   		return *this;
   	}
   };
   
   
项目：企业员工管理系统V6.0
需求：增加技术员类和经理类
		 员工类(Employee)
		/		 \
	技术员  	  经理
	
	1）技术员：
		研发津贴(元/小时)
	   绩效工资=实际工作小时*研发津贴*进度因数(输入)
	2）经理：
		绩效奖金(元/小时)
		绩效工资=绩效奖金*绩效因数(输入)