Qt(跨平台的C++ GUI应用程序开发框架)
时间：6 days
----------------------------
一 Qt的概述
1 Qt发展历史
1）1991年Haavard Nord和Eirik Chambe-Eng合作编写最初的Qt.
2）1994年Haavard和Eirik创建了TrollTech(奇趣科技)
3）2005年Qt4.0发布
4）2008年奇趣科技被诺基亚收购
5）2009年将Qt源代码开放
6）2012年将Qt全部业务和知识产权出售给Digia公司
7）2013年成立子公司The Qt Company
	https://www.qt.io
	
2 Qt主要的工具软件
1）assistant(Qt助手)
   执行"assistant"即可进入Qt帮助手册界面，里面包含Qt类库的详细说明文档.
2）qmake(qt构建器)
   qmake -v //查看Qt版本信息
   qmake -project//构建工程，得到“xx.pro”
   qmake //根据“xx.pro”生成Makefile
3）designer(Qt设计师)
   图形界面编辑器，用于实现界面设计，执行“designer”即可进入设计师界面。
4）uic(Qt界面转换器)
   实现将设计师得到的.ui文件转换为C++文件
   uic xx.ui -o ui_xx.h
5）rcc(Qt资源编译器)
	将资源文件(图片)转换为C++源文件
6）moc(元对象编译器)
	将Qt中语法扩展的内容转换为标准C++代码
7）qtcreator(Qt创造器)
	Qt的集成开发环境(IDE),包含所有相关工具
	
3 Qt帮助手册使用:assistant
eg:QApplication
1）先看第一句话，了解该类的功能，如果看不懂可以点“more”链接，查看该类的详细说明.
2）接着往下看，了解头文件，构建选项(QT+=widgets)和继承关系。
3）Properties(成员变量)
4）Public Functions(公有成员函数)
5）Reimplemented Public Functions(公有虚函数)
6）Public Slots(槽函数)//Qt语法扩展
7）Signals(信号函数)//Qt语法扩展
8）Static Public Members(静态公有成员)
9）Reimplemented Protected Functions(保护虚函数)
10）Detailed Description(详细描述)

练习：查看QLabel类帮助手册

二 第一个Qt程序
1 创建工程目录
  mkdir Hello
  注：每个Qt程序都要放在独立的目录下
2 进入工程目录，编写源代码(cpp)
  vi main.cpp
3 执行“qmake -project”构建工程,生成Hello.pro工程文件
  vi Hello.pro
  QT += widgets//指定需要使用widget模板，将来会自动链接该模块相关的头文件和库文件。
4 执行“qmake”,根据工程文件生成Makefile
5 执行“make”，完成编译和链接
  注：如果有语法错误，修改以后再次执行“make”即可，前面3、4两步不要重复执行
6 测试运行
  执行"./Hello",正常看到一个标签窗口  
  
练习：创建QT应用程序，里面包含一个按钮(QPushButton),按钮显示文本“Button”.  

三 Qt字符串(QString)和字符编码
1 常见编码
1）linux中默认中：utf-8
2）window中默认使用：GBK
3）Qt内部编码unicode(utf-16)

2 编码转换类：QTextCodec
//1)创建GBK编码对象
QTextCodec *codec=QTextCodec::codecForName("GBK");
//2)将GBK编码字符串转换为unicode编码
QString string=codec->toUnicode("GBK编码字符串");

练习：创建Qt应用程序，里面包含一个标签和一个按钮，标签显示文本“我是标签”，按钮显示文本“我是按钮”
1）正常构建，6步，正确显示
2）通过vi底行命令，将编码修改为gbk，再次make结果乱码
   :set fileencoding=GBK
3）使用QTextcodec实现编码转换，再次make，结果又可以正确显示。

四 父窗口(容器窗口)
1 在创建控件可以指定停靠在某个父窗口上面，通过父窗口可以管理整个界面；而如果创建控件时没有将会飘在外面形成独立的窗体.

2 常用的父窗口类
1）QWidget//控件基类
2）QMainWindow//主窗口
3）QDialog//对话框

3 QWidget类中两个常用函数
1）调整位置
	void move(int x,int y);
2）调整大小
	void resize(int w,int h);
	
注：使用new操作符创建Qt的对象时，如果指定了父窗口，也可以不写delete，因为在父窗口对象销毁时，上面停靠的对象会自动被delete.

五 信号和槽//重点掌握
1 概念
	信号和槽本质都是Qt中的成员函数，主要用于不同对象之间的数据交互，当某个对象状态发生改变时，将会发送信号，该信号可以被其它对象接收，接收信号的对象将会执行一个指定的成员函数(槽).
	
2 定义
  class XX:public QObject{
  		Q_OBJECT //moc
  signals:
  		void sigFun(...);//信号
  public slots:
  		void slotFun(...){...}//槽
  };
  注：只有QObject子类才可以定义信号或槽	
  注：信号函数只需声明，不能写定义	 
  注：槽函数可以连接到某个信号上，通过信号可以触发槽函数的执行，另外槽函数也可以当做普通成员函数直接调用

3 信号和槽连接
QObject::connect(
	const QObject * sender, //信号发送对象
	const char * signal, //信号函数
	const QObject * receiver, //信号接收对象
	const char * method) //槽函数
  
  SIGNAL(信号函数);//将信号函数转换为const char*
  SLOT(槽函数);//将槽函数转换为const char*
  
  案例：创建QT应用程序，里面包含一个标签和一个按钮，实现点击按钮关闭标签。

回顾：
1 Qt概述
1）qt版本，Qt5.x.x、Qt4.x.x
2）qt工具，assistant、qmake

2 第一个Qt程序
1）创建工程目录
2）编写(cpp)
3）qmake -project//.pro 
4）qmake //Makefile
5）make
6）测试运行

3 Qt字符串(QString)和字符编码
  QTextCodec* codec=QTextCodec::codecForName("GBK");
  QString str=codec->toUnicode("GBK编码字符串");
  
4 父窗口
1）常用父窗口类：QWidget、QMainWindow、QDialog
2）QWidget中两个常用函数：move(),resize()

---------------
今天：
一 信号和槽//重点掌握
1 概念
	信号和槽本质都是Qt中的成员函数，主要用于不同对象之间的数据交互，当某个对象状态发生改变时，将会发送信号，该信号可以被其它对象接收，接收信号的对象将会执行一个指定的成员函数(槽).
	
2 定义
  class XX:public QObject{
  		Q_OBJECT //moc
  signals:
  		void sigFun(...);//信号
  public slots:
  		void slotFun(...){...}//槽
  };
  注：只有QObject子类才可以定义信号或槽	
  注：信号函数只需声明，不能写定义	 
  注：槽函数可以连接到某个信号上，通过信号可以触发槽函数的执行，另外槽函数也可以当做普通成员函数直接调用

3 信号和槽连接
QObject::connect(
	const QObject * sender, //信号发送对象
	const char * signal, //信号函数
	const QObject * receiver, //信号接收对象
	const char * method) //槽函数
  
  SIGNAL(信号函数);//将信号函数转换为const char*
  SLOT(槽函数);//将槽函数转换为const char*
  
4 信号和槽连接语法要求
1）信号和槽参数要一致
	QObject::connect(A,SIGNAL(sigfunc(int)),
			 B,SLOT(slotfunc(int)));//ok
	QObject::connect(A,SIGNAL(sigfunc(void)),
			 B,SLOT(slotfunc(int)));//error
2）可以带有缺省参数
	QObject::connect(A,SIGNAL(sigfunc(void)),
			B,SLOT(slotfunc(int=0)));//ok
3）信号函数可以比槽函数参数多，多余将被忽略
	QObject::connect(A,SIGNAL(sigfunc(int,int)),
			B,SLOT(slotfunc(int)));//ok	
4）一个信号可以被连接到多个槽函数(一对多)
	QObject::connect(A,SIGNAL(sigfunc(int)),
			B1,SLOT(slotfunc1(int)));
	QObject::connect(A,SIGNAL(sigfunc(int)),
			B2,SLOT(slotfunc2(int)));	
	注：当A发送信号时，B1和B2的槽函数都将被执行，但是执行顺序不确定
5）多个信号可以连接到同一个槽函数(多对一)
	QObject::connect(A1,SIGNAL(sigfunc1(int)),
			B,SLOT(slotfunc(int)));
	QObject::connect(A2,SIGNAL(sigfunc2(int)),
			B,SLOT(slotfunc(int)));
	注：无论是A1还是A2发射信号，B的槽函数都会被执行
6）两个信号函数可以直接连接//了解
	QObject::connect(A1,SIGNAL(sigfunc1(int)),
			A2,SIGNAL(sigfunc2(int)));
	注：当A1发送信号后，触发A2的信号也发送				  

案例：事件同步，实现滑块控件和选值框控件同步运行
1）滑块类：QSlider
  //构造函数
  QSlider(水平/垂直,父窗口指针);
  //设置滑块滑动范围
  setRange(int min, int max);
  //滑块滑动时发送信号
  valueChanged(int value)[signal]
  //设置滑块位置的槽函数	
  setValue(int)[slot]
2）选值框：QSpinBox
  //构造函数
  QSpinBox(父窗口指针);
  //设置选值框数值改变范围
  setRange(int min, int max);
  //选值框数值改变时发送信号
  valueChanged(int value)[signal]
  //设置选值框当前数值的槽函数	
  setValue(int)[slot]
  
  
二 面向对象的Qt编程
案例：加法计算器
思路：
	class CalculatorDialog:public QDialog{
		Q_OBJECT //moc,处理自定义槽函数语法扩展
	public:
		构造函数(){
			//界面初始化
		}
	public slots://自定义槽函数
		void 检查并恢复按钮正常状态的槽函数(){
			...
		}
		void 计算和显示结果的槽函数(){
			...
		}
	private:
		QLineEdit\QLabel\QPushButton;
	};
	int main(int argc,char** argv){
		QApplication app(argc,argv);
		CalculatorDialog calc;
		calc.show();
		return app.exec();
	}
	QT中相关类：
		QDialog//父窗口
		QLineEdit//行编辑控件
		QLabel//标签
		QPushButton//按钮
		QDoubleValidator//数字验证器
		QHBoxLayout//水平布局器,自动调整控件大小和位置
		
三 Qt设计师使用(designer)	
案例：使用Qt设计师，重构加法计算器程序
1 创建工程目录
   mkdir Calculator2
2 进入工程目录
1）执行“designer”进入设计师界面，完成界面设计
2）在新建窗体界面，选择父窗口"Dialog without Button"

3 在设计师环境中完成界面设计
1）将要使用的控件从“widget Box”找到并拖拽到父窗口中
   LineEdit、Label、PushButton
2）设置父窗口和每个控件属性
--》父窗口
    objectName(对象名):CalculatorDialog
    注：将来会根据父窗口的对象名生成同名的类，和界面相关的代码都会放在该类中.
    font(字体)：点大小(20)
    windowTitle：计算器
--》左操作数
	 objectName：m_editX
	 alignment:水平(AlignRight)   
--》右操作数
	 objectName：m_editY
	 alignment:水平(AlignRight)
--》显示结果
	 objectName：m_editZ
	 alignment:水平(AlignRight)
	 readOnly：勾选√
--》加号
	 objectName：m_label
	 text:"+"
--》等号
	 objectName：m_button
	 text:"="
	 enabled：去掉勾选√（禁用）
3）调整大小和位置
--》方法1：使用鼠标
--》方法2：键盘按键，“ctrl/shift+方向键”
--》方法3：设置geometry，位置(x,y) 大小(宽度)
--》方法4：使用布局器//推荐

4）窗体--》预览
5）保存(ctrl+s),指定文件名：CalculatorDialog.ui
6）关闭，最终得到“CalculatorDialog.ui”文件

4 将".ui"转换为C++的源文件".h"
  uic CalculatorDialog.ui -o ui_CalculatorDialog.h
  
"ui_CalculatorDialog.h"内容：
  class Ui_CalculatorDialog{
  public:
  		图形控件声明;
  		void setupUi(){
  			//界面初始化
  		}
  };
  namespace Ui{
  	class CalculatorDialog
  		:public Ui_CalculatorDialog{};
  }
  Ui::CalculatorDialog<=等价=>Ui_CalculatorDialog

使用“ui_CalculatorDialog.h”方法：
  方法1：继承
  class MyClass:public Ui::CalculatorDialog{
  		//将和界面相关代码继承过来直接使用
  };
  方法2：组合
  class MyClass{
  public:
  		MyClass(void):ui(new Ui::CalculatorDialog)
  private:
  		//通过"ui->"访问和界面相关代码
  		Ui::CalculatorDialog* ui;
  };
  
5 编码、构建、测试...


练习：使用设计师，设计获取系统时间的窗口，实现点击获取时间按钮，获取当前系统时间并显示。
参考：time.png
提示：获取时间方法
	QTime time = QTime::currentTime();
	QString str = time.toString("hh:mm:ss");

回顾：
1 信号和槽连接
1）参数要一致
2）可以有缺省值
3）信号函数参数可以多于槽函数
4）一对多
5）多对一
6）两个信号函数可以直接连接

2 面向对象Qt编程

3 Qt设计师
  xx.ui(xml)--uic-->ui_xx.h(c++)
-----------------------------------
案例：获取系统时间
界面设计：
	m_label：
		frameShape:Panel
		frameShadow:Sunken
		alignment:水平(AlignHCenter)
------------------------------------
案例：登录对话框
1）创建工程目录：Login
2）进入工程目录，启动设计师，完成界面设计
--》父窗口
    objectName:LoginDialog
    font:点大小(20)
    windowTitle:登录
--》用户名输入控件
	 objectName：m_editUsername
--》密码输入控件
	 objectName：m_editPassword
	 echoMode：password
--》确定/取消的按钮框
	 objectName：m_btnBox
	 layoutDirction:RightToLeft
--》布局调整大小位置
--》保存(LoginDialog.ui)	

-----------------------------------------
一 Qt创造器使用(qtcreator)
案例：使用qtcreator再次重构加法计算器案例
1 任意目录下执行“qtcreator”进入Qt创造器界面
2 在欢迎模式，点击“new Project”创建工程
1）选择模板
   Application->Qt Widgets Application
2）项目位置和介绍
	名称：Calculator3
	位置：/home/tarena/c++1905/qt/day03
	注：将来会在指定位置创建和工程名字一致的工程目录
3）kit Selection(默认)
4）类信息
	选择基类(父窗口)：QDialog
	指定类名：CalculatorDialog
	注：将来会根据类名，自动生成对应的文件
		CalculatorDialog.h
		CalculatorDialog.cpp
		CalculatorDialog.ui
5）项目管理(忽略)	
6）完成，将自动切换编辑模式

3 双击“CalculatorDialog.ui”，进入设计模式(designer),完成界面设计：
1）将要使用的控件从“widget Box”找到并拖拽到父窗口中
   LineEdit、Label、PushButton
2）设置父窗口和每个控件属性
--》父窗口
    objectName(对象名):默认不要修改！！！
    font(字体)：点大小(20)
    windowTitle：计算器
--》左操作数
	 objectName：m_editX
	 alignment:水平(AlignRight)   
--》右操作数
	 objectName：m_editY
	 alignment:水平(AlignRight)
--》显示结果
	 objectName：m_editZ
	 alignment:水平(AlignRight)
	 readOnly：勾选√
--》加号
	 objectName：m_label
	 text:"+"
--》等号
	 objectName：m_button
	 text:"="
	 enabled：去掉勾选√（禁用）
3）调整大小和位置
--》方法1：使用鼠标
--》方法2：键盘按键，“ctrl/shift+方向键”
--》方法3：设置geometry，位置(x,y) 大小(宽度)
--》方法4：使用布局器//推荐
4）运行(ctrl+R)-->预览
5）保存(ctrl+s)

二 资源和图像
1 资源编译器(rcc)
1）创建资源文件(.qrc)//xml
vi test.qrc
<RCC>
    <qresource prefix="/">
        <file>6.jpg</file>
    </qresource>
</RCC>
2）使用rcc转换C++源文件
rcc test.qrc -o qrc_test.cpp

2 绘图事件
1）程序开始运行或者窗口发生改变将会触发，也可以通过调用update()/repaint()也可以触发执行.
2）绘图事件处理函数(虚函数)
	virtual void QWidget::paintEvent(QPaintEvent*);
注：绘图事件处理函数是虚函数，如果希望在自定义窗口中绘制指定图像，可以通过重写paintEvent，在其中通过“画家类”实现图像绘制。

3 画家类QPainter//Qt二维图形引擎
  QPainter painter(this);
  painter.drawImage(QRect,QImage);
  QRect:绘图所在矩形区域
  QImage:要绘制的图像

案例：图图秀
1）工程名：ShowImage
2）类信息：ShowImageDialog
3）界面设计
--》Frame(显示框架)
	objectName:m_frame
	sizePolicy:垂直策略(Expanding)
	frameShape:Box
--》m_btnNext(下一张按钮)
--》m_btnPrev(上一张按钮)
4）向工程添加资源图片
--》将“images”目录拷贝到工程下
--》添加新文件：Qt->Qt Resource File(资源文件)
--》指定名字：showImage
--》完成，自动创建showiamge.qrc资源文件，并进入资源编辑界面
--》添加->添加前缀“/new/prefix1”
--》添加->添加文件：选择images目录10个图片并打开

回顾：
1 Qt设计师(designer)
2 Qt创造器(qtcreator)
3 资源和图像
  xx.qrc(xml)--rcc--qrc_xx.cpp
  paintEvent()/QPainter
---------------------
今天：
一 目录和定时器
1 目录(QDir)
1)创建目录对象
  QDir dir("/home/tarena/c++1905/qt/photos");//绝对路径
  QDir dir("./photos");//相对路径(推荐)
  
2）遍历目录的内容
  QStringList entryList(Filters filters);
  filters:过滤器，指定要访问的内容
  		QDir::Dirs //子目录
  		QDir::Files //普通文件
  		QDir::NoDotAndDotDot//不包括"."".."
  		
eg:遍历访问“./photos”目录所有的普通文件
	QDir dir("./photos");
	QStringList list=dir.entryList(QDir::Files);
	for(int i=0;i<list.size();i++){
		qDebug() << list.at(i);
	}
	
2 定时器
1）定时器事件
	//定时器事件处理函数，定时器到时后将被触发执行
	virtual void timerEvent(QTimerEvent*);
	//开始定时器
	int startTimer(int interval);
	注：指定定时器间隔时间(毫秒)，返回定时器ID
	//关闭定时器,参数为定时器ID
	void killTimer(int id);

2）定时器类(QTimer)
	QTimer timer;//创建定时器对象
	//开启定时器，每隔msec毫秒发送信号timeout
	timer.start(int msec);
	//通过自定义槽函数处理定时器
	connect(&timer,SIGNAL(timeout()),
		this,SLOT(mySlot()));
	//关闭定时器
	timer.stop();
	
 案例：摇奖机
 1）工程名：Lottery
 2）类名：LotteryDialog
 3）界面设计
 --》父窗口：
 	font：点大小(20)
	windowTitle:摇摇乐
 --》frame
 	objectName:m_frame
 	sizePolicy:垂直策略(expanding)
 	frameShape:box
 --》pushButton
 	objectName:m_button
 	text:"开始"
 	
 注：在项目模式中，取消“Shadow Build”，然后将photos目录拷贝到工程目录下.
 
二 鼠标和键盘
1 鼠标事件 
  #include <QMouseEvent>
  virtual void mousePressEvent(QMouseEvent*)//按下
  virtual void mouseReleaseEvent(QMouseEvent*)//抬起
  virtual void mouseMoveEvent(QMouseEvent*)//移动
  //双击
  virtual void mouseDoubleClickEvent(QMouseEvent*)
  
  ----------------------------------------
  QPoint(int x,int y) //位置
  QSize(int w,int h) //大小
  QRect(int x,int y,int w,int h)//矩形区域
  -----------------------------------------
  
  案例：使用鼠标左键拖拽label移动
  工程名：Mouse
  类名：MouseDialog
  界面设计(label)：
  -->frameShape:Box
  -->frameShadow:Raised
  
  修改label背景颜色：
  方法1：调色板
  		--》autoFillBackground:勾选√
  		--》palette：点击“继承”->改变调整板->选择颜色
  方法2：样式表
  		--》styleSheet
  		--》编辑样式表
  		--》添加颜色
  		--》background-color（选择颜色）
  		
2 键盘事件 	
#include <QKeyEvent>
virtual void keyPressEvent(QKeyEvent*)//按键按下
virtual void keyReleaseEvent(QKeyEvent*)//按键抬起 

案例：使用键盘方向键控制label移动
工程名：Keyboard
类名：KeyboardDialog 	
  
三 Qt多线程(QThread)
1 创建线程方法1：moveToThread
  class Worker:public QObject{
  		Q_OBJECT
  public slots:
  		void dowork(void){
  			//耗时或阻塞代码，需要放在子线程中执行
  		}
  };	
  //创建子线程对象
  QThread workerThread;
  //创建Worker对象
  Worker* worker = new Worker;
  //将worker对象移动到子线程中
  worker->moveToThread(&workerThread);//关键代码
  //通过某信号，触发worker的槽函数执行
  connect(xx,SIGNAL(xx),worker,SLOT(doWork()));
  //开启子线程
  workerThread.start();


2 创建线程方法2：继承QThread，重写run函数
	class WorkerThread:public QThread{
		void run(void){
			//耗时或阻塞代码，需要放在子线程中执行
		}
	};
	WorkerThread workerThread;
	//子类重写的run函数将被执行(子线程)
	workerThread.start();
	
案例：多线程打印消息
方法一 工程：Thread1
方法二 工程：Thread2

3 线程同步//了解
1）互斥锁：QMutex
	QMutex mutex;
	void run(void){
		//mutex.lock();
		QMutexLocker locker(&mutex);//加锁
		注：线程结束，QMutexLocker在析构函数中解锁
		//访问共享资源
		if("Error1"){
			//mutex.unlock();
			return;
		}
		if("Error2"){
			//mutex.unlock();
			return;
		}
		...
		//访问结束
		//mutex.unlock();
	}

2）读写锁：QReadWriteLock
QReadWriteLock lock;
void ReaderThread::run(){//读操作线程
    ...
    lock.lockForRead();
    read_file();
    lock.unlock();
    ...
}
void WriterThread::run(){//写操作线程
    ...
    lock.lockForWrite();
    write_file();
    lock.unlock();
    ...
}

3）信号量：QSemaphore
//初始化信号计数5：表示有5个可用的共享资源
QSemaphore sem(5);//sem.available() == 5
//获取3个资源，剩余2个
sem.acquire(3); //sem.available() == 2
//获取2个资源，剩余0个
sem.acquire(2); // sem.available() == 0
//释放5个资源，剩余5个
sem.release(5); // sem.available() == 5
//再分配5个资源，剩余10个
sem.release(5);  // sem.available() == 10
//尝试获取1个资源，成功，剩余9个
sem.tryAcquire(1);//sem.available()==9,true
//尝试获取250个资源，失败，剩余9个
sem.tryAcquire(250);//sem.available()==9,false

回顾：
1 目录操作：QDir
2 定时器：
1）定时器事件，timerEvent()
2）定时器类，QTimer
3 鼠标事件：QMouseEvent
1)mousePressEvent()
2)mouseReleaseEvent()
3)mouseMoveEvent()
4)mouseDoubleClickEvent()
4 键盘事件：QKeyEvent
1)keyPressEvent()
2)keyReleaseEvent()
5 Qt多线程(QThread)
1)moveToThread()
2)继承QThread，重写run函数
6 线程同步
1)互斥锁：QMutex
2)读写锁：QReadWriteLock
3)信号量：QSemaphore

-----------------------
今天：
一 Qt网络编程
1 网络层次模型(OSI七层)
1）应用层：Http、FTP、Pop3、SMTP...
2）表示层
3）会话层
4）传输层：UDP、TCP
5）网络层：IP协议
6）数据链路层
7）物理层

2 IP地址
1）互联网中唯一的地址标识
2）IPv4(32位)、IPv6(128位)
3）IPv4地址表示方式
--》点分十进制 “xx:xx:xx:xx"
--》十六进制数 0x12345678
eg:
	"192.168.15.100"//点分十进制 
   0xC0A80F64 //十六进制数
4）查看IP地址指令
linux:ifconfig
window:ipconfig
5）专用的IP地址
"0.0.0.0" //任意地址(INADDR_ANY)
"127.0.0.1" //本地环回地址
"255.255.255.255"//广播地址
6）通过IP判断两个主机是否连通
ping 对方IP地址;

3 Qt网络编程相关类
1）QHostAddress//IP地址
   QHostAddress ip("xx.xx.xx.xx");
   QHostAddress ip;
   ip.setAdress("xx.xx.xx.xx");
   
   QHostAddress::Any //"0.0.0.0"
   QHostAddrsss::LocalHost //"127.0.0.1"
   QHostAddress::Broadcast //"255.255.255.255"

2）QAbstractSocket//套接字基类
   bool bind(ip,port);//绑定IP和端口
   void connectToHost(ip,port);//连接服务器
   void disconnectFromHost();//断开连接
   SocketState state();//获取套接字的状态
   qint64 bytesAvailable();//获取等待读取消息字节数

   void connected()[signal]//连接服务器成功发送
   void disconnected()[singal]//断开服务器连接时发送
   void readyRead()[signal]//套接字有新数据时发送
   void error(SocketError)[singal]//网络异常时发送

	//读操作(接收网络消息)
	qint64 read(char* data,qint64 size);
	QByteArray read(qint64 size);
	QByteArray readAll();
	
	//写操作(发送网络消息)
	qint64 write(const char* data,qint64 size);
	qint64 write(const char* data);
	qint64 write(const QByteArray& byteArray);
	
4 UDP编程(QUdpSocket)
	//接收数据包
	qint64 readDatagram(char* data,qint64 size,
		/*QHostAddress ip,quint16 port*/);
	
	//发送数据包
	qint64 writeDatagram(const char*data,qint64 size,
		const QHostAddress& ip,quint16 port);
	qint64 writeDatafram(const QByteArray& datagram,
		const QHostAddress& ip,quint16 port);
	
	//判断是否有等待读取的数据包
	bool hasPendingDatagrams();
	
	//获取等待读取的数据包大小
	qint64 pendingDatagramSize();

案例：UDP网络广播
1）发送端
--》广播地址：255.255.255.255
--》广播端口：8888
--》用户输入广播消息，每隔1秒发送一次
工程名：Sender，SenderDialog


2）接收端
--》绑定接收广播IP：“0.0.0.0”
--》绑定接收广播端口：8888
--》接收广播消息并显示
工程名：Receiver，ReceiverDialog

5 TCP编程
1）QTcpSocket//TCP通信套接字
2）QTcpServer//TCP服务器
   //设置监听服务器的IP和端口
   bool listen(serverIp,serverPort);
   //有新的客户端和服务器建立连接时将被发送
   void newConnection()[signal]
   //获取和客户端通信的套接字
   QTcpSocket* nextPendingConnection()
   
案例：网络聊天室
1）服务器：
--》QTcpServer创建TCP服务器
--》响应客户端连接请求，保存和客户端通信的套接字
--》接收客户端的聊天消息
--》转发聊天消息给其它客户端
工程名：Server，ServerDialog

2）客户端：
--》使用QTcpSocket创建套接字  
--》向服务器发送连接请求
--》获取用户输入聊天消息，发送到服务器
--》接收服务器转发的消息并显示
工程名：Client，ClientDialog

   
   回顾：QT网络编程
1）QHostAddress//IP地址
2）QAbstractSocket//套接字基类
3）QUdpSocket//UDP套接字
4）QTcpServer//TCP服务器
5）QTcpSocket//TCP套接字
--------------------------------
今天：
1 多窗口编程
1）先显示子窗口，在显示主界面//windows1
2）先显示主界面，在弹出子窗口//windows2
3）同时显示多个窗口//window3
注：一般子窗口推荐使用QDialog

2 QMainWindow主窗口使用
工程名：MainWindow

-------------------------------------
项目：Http客户端(代码下载器)
1 需求分析
实现从“http://code.tarena.com.cn/”下载代码
1）显示下载代码界面
2）处理目录链接
3）实现文件下载功能

2 概要设计
3 详细设计
4 编写代码
5 测试运行
*6 代码重构
7 产品发布
8 升级维护
-----------------------------------
Http协议简介：
1）请求：客户端给服务器发送消息
--》请求行 
--》请求头
--》空行 “\r\n”
--》可选消息体

2）响应：服务器给客户端返回消息
--》响应头行(状态行)
--》响应头域
--》空行 “\r\n”
--》消息体

------------------------
QT中相关类：
1）QNetworkAccessManager//管理通信过程
2）QNetworkRequest //请求
3）QNetworkReply //响应
4）QUrl	//网络地址
eg:
  http://code.tarena.com.cn/www/xx.tar.gz
5）QDir/QFile/QFileInfo //目录或文件操作
6）QTextBrowser //文本浏览器(控件)

工程名：HttpClient
类名：MainWindow

----------------------
忽略下面提示：
qt.network.ssl: QSslSocket: cannot resolve SSLv2_client_method
qt.network.ssl: QSslSocket: cannot resolve SSLv2_server_method
----------------------
任务：
1）在验证登录增加登录对话框，用户名和密码信息从登录对话框获取。
2）将下载文件操作，放到子线程中执行，实现多文件的同时下载
3）下载文件时，指定保存在“/home/tarena/Downloads”目录下面

参考代码：refer.tar.gz
17:00讲








