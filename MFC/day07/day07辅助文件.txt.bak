 1.1 创建单文档模板对象
CSingleDocTemplate(...)
{
  // 将构造函数的参数分别保存到对应的成员变量中
  m_nIDResource = nIDResource;
  m_pDocClass = pDocClass;
  m_pFrameClass = pFrameClass;
  m_pViewClass = pViewClass;
  m_pOnlyDoc = NULL;//在没有创建文档时，该值为空
}
1.2 将文档模板对象添加到应用程序
CWinApp::AddDocTemplate(&文档模板对象)
{
  m_pDocManager->AddDocTemplate(pTemplate);
  {
     	m_templateList.AddTail(pTemplate);
  }
} 
1.3 新建文档 
CWinApp::OnFileNew()
{
  m_pDocManager->OnFileNew();
  {
     CDocTemplate* pTemplate = (CDocTemplate*)m_templateList.GetHead();
     {
       	pTemplate->OpenDocumentFile(NULL);
       	{
       	   CDocument* pDocument = NULL;
	         CFrameWnd* pFrame = NULL;
	         // 1 创建新的文档
	         pDocument = CreateNewDocument();
	         {
	            // 1.1 动态创建文档对象
	            CDocument* pDocument = (CDocument*)m_pDocClass->CreateObject();
	            // 1.2 文档与文档模板相互保存对方地址
	            AddDocument(pDocument);
	            {
	              CDocTemplate::AddDocument(pDoc);
	              {
	                 	pDoc->m_pDocTemplate = this;
	              }
	              m_pOnlyDoc = pDoc;
	            }
	         }
	         // 2 创建新的框架
	         pFrame = CreateNewFrame(pDocument, NULL);
	         {
	            CCreateContext context;
	            // 文档
					context.m_pCurrentDoc = pDoc;
					// 视图的运行时类信息
					context.m_pNewViewClass = m_pViewClass;
					// 文档模板
					context.m_pNewDocTemplate = this;
					// 2.1 动态创建框架对象
					CFrameWnd* pFrame = (CFrameWnd*)m_pFrameClass->CreateObject();
	            // 2.2 创建框架窗口
	            pFrame->LoadFrame(m_nIDResource,...,&context);
	            // 2.3 创建框架窗口，触发WM_CREATE消息，在消息处理函数
	            中，动态创建视图对象，并创建视图窗口。
	            // 2.4 创建视图窗口，触发WM_CREATE消息，在消息处理函数
	            中，文档与视图相互保存对方地址。
	         }
	         // 3 App中保存Frame的地址
	         CWinThread* pThread = AfxGetThread();
	         pThread->m_pMainWnd = pFrame;
	         // 4 
	         InitialUpdateFrame(pFrame, pDocument, bMakeVisible);
	         {
	            
	         }
       	}
     }
  }
}